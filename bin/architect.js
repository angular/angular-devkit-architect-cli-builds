#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const fs_1 = require("fs");
const minimist = require("minimist");
const path = require("path");
const throw_1 = require("rxjs/observable/throw");
const operators_1 = require("rxjs/operators");
function findUp(names, from) {
    if (!Array.isArray(names)) {
        names = [names];
    }
    const root = path.parse(from).root;
    let currentDir = from;
    while (currentDir && currentDir !== root) {
        for (const name of names) {
            const p = path.join(currentDir, name);
            if (fs_1.existsSync(p)) {
                return p;
            }
        }
        currentDir = path.dirname(currentDir);
    }
    return null;
}
/**
 * Show usage of the CLI tool, and exit the process.
 */
function usage(exitCode = 0) {
    logger.info(core_1.tags.stripIndent `
    architect [project][:target][:configuration] [options, ...]

    Run a project target.
    If project/target/configuration are not specified, the workspace defaults will be used.

    Options:
        --help              Show available options for project target.
                            Shows this message instead when ran without the run argument.


    Any additional option is passed the target, overriding existing options.
  `);
    process.exit(exitCode);
    throw 0; // The node typing sometimes don't have a never type for process.exit().
}
/** Parse the command line. */
const argv = minimist(process.argv.slice(2), { boolean: ['help'] });
/** Create the DevKit Logger used through the CLI. */
const logger = node_1.createConsoleLogger(argv['verbose']);
// Check the target.
const targetStr = argv._.shift();
if (!targetStr && argv.help) {
    // Show architect usage if there's no target.
    usage();
}
// Split a target into its parts.
let project, targetName, configuration;
if (targetStr) {
    [project, targetName, configuration] = targetStr.split(':');
}
// Load workspace configuration file.
const currentPath = process.cwd();
const configFileNames = [
    'angular.json',
    '.angular.json',
    'workspace.json',
    '.workspace.json',
];
const configFilePath = findUp(configFileNames, currentPath);
if (!configFilePath) {
    logger.fatal(`Workspace configuration file (${configFileNames.join(', ')}) cannot be found in `
        + `'${currentPath}' or in parent directories.`);
    process.exit(3);
    throw 3; // TypeScript doesn't know that process.exit() never returns.
}
const root = core_1.dirname(core_1.normalize(configFilePath));
const configContent = fs_1.readFileSync(configFilePath, 'utf-8');
const workspaceJson = JSON.parse(configContent);
const host = new node_1.NodeJsSyncHost();
const workspace = new core_1.experimental.workspace.Workspace(root, host);
let lastBuildEvent = { success: true };
workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.concatMap(ws => new architect_1.Architect(ws).loadArchitect()), operators_1.concatMap(architect => {
    const overrides = Object.assign({}, argv);
    delete overrides['help'];
    delete overrides['_'];
    const targetSpec = {
        project,
        target: targetName,
        configuration,
        overrides,
    };
    // TODO: better logging of what's happening.
    if (argv.help) {
        // TODO: add target help
        return throw_1._throw('Target help NYI.');
        // architect.help(targetOptions, logger);
    }
    else {
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        return architect.run(builderConfig, { logger });
    }
})).subscribe({
    next: (buildEvent => lastBuildEvent = buildEvent),
    complete: () => process.exit(lastBuildEvent.success ? 0 : 1),
    error: (err) => {
        logger.fatal(err.message);
        if (err.stack) {
            logger.fatal(err.stack);
        }
        process.exit(1);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJjaGl0ZWN0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9hcmNoaXRlY3RfY2xpL2Jpbi9hcmNoaXRlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU0EseURBQXNEO0FBQ3RELCtDQUE4RTtBQUM5RSxvREFBZ0Y7QUFDaEYsMkJBQThDO0FBQzlDLHFDQUFxQztBQUNyQyw2QkFBNkI7QUFDN0IsaURBQStDO0FBQy9DLDhDQUEyQztBQUczQyxnQkFBZ0IsS0FBd0IsRUFBRSxJQUFZO0lBQ3BELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUNELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRW5DLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQztJQUN0QixPQUFPLFVBQVUsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDekMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN0QyxFQUFFLENBQUMsQ0FBQyxlQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsQ0FBQztRQUNILENBQUM7UUFFRCxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7R0FFRztBQUNILGVBQWUsUUFBUSxHQUFHLENBQUM7SUFD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QixPQUFPO1FBQ1AsTUFBTSxFQUFFLFVBQVU7UUFDbEIsYUFBYTtRQUNiLFNBQVM7S0FDVixDQUFDO0lBRUYsNENBQTRDO0lBQzVDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2Qsd0JBQXdCO1FBQ3hCLE1BQU0sQ0FBQyxjQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsQyx5Q0FBeUM7SUFDM0MsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXBFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUNILENBQUMsU0FBUyxDQUFDO0lBQ1YsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDO0lBQ2pELFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELEtBQUssRUFBRSxDQUFDLEdBQVUsRUFBRSxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgQXJjaGl0ZWN0IH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBkaXJuYW1lLCBleHBlcmltZW50YWwsIG5vcm1hbGl6ZSwgdGFncyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IE5vZGVKc1N5bmNIb3N0LCBjcmVhdGVDb25zb2xlTG9nZ2VyIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUvbm9kZSc7XG5pbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBtaW5pbWlzdCBmcm9tICdtaW5pbWlzdCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL3Rocm93JztcbmltcG9ydCB7IGNvbmNhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG5mdW5jdGlvbiBmaW5kVXAobmFtZXM6IHN0cmluZyB8IHN0cmluZ1tdLCBmcm9tOiBzdHJpbmcpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG5hbWVzKSkge1xuICAgIG5hbWVzID0gW25hbWVzXTtcbiAgfVxuICBjb25zdCByb290ID0gcGF0aC5wYXJzZShmcm9tKS5yb290O1xuXG4gIGxldCBjdXJyZW50RGlyID0gZnJvbTtcbiAgd2hpbGUgKGN1cnJlbnREaXIgJiYgY3VycmVudERpciAhPT0gcm9vdCkge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgY29uc3QgcCA9IHBhdGguam9pbihjdXJyZW50RGlyLCBuYW1lKTtcbiAgICAgIGlmIChleGlzdHNTeW5jKHApKSB7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGN1cnJlbnREaXIgPSBwYXRoLmRpcm5hbWUoY3VycmVudERpcik7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBTaG93IHVzYWdlIG9mIHRoZSBDTEkgdG9vbCwgYW5kIGV4aXQgdGhlIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIHVzYWdlKGV4aXRDb2RlID0gMCk6IG5ldmVyIHtcbiAgbG9nZ2VyLmluZm8odGFncy5zdHJpcEluZGVudGBcbiAgICBhcmNoaXRlY3QgW3Byb2plY3RdWzp0YXJnZXRdWzpjb25maWd1cmF0aW9uXSBbb3B0aW9ucywgLi4uXVxuXG4gICAgUnVuIGEgcHJvamVjdCB0YXJnZXQuXG4gICAgSWYgcHJvamVjdC90YXJnZXQvY29uZmlndXJhdGlvbiBhcmUgbm90IHNwZWNpZmllZCwgdGhlIHdvcmtzcGFjZSBkZWZhdWx0cyB3aWxsIGJlIHVzZWQuXG5cbiAgICBPcHRpb25zOlxuICAgICAgICAtLWhlbHAgICAgICAgICAgICAgIFNob3cgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIHByb2plY3QgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3dzIHRoaXMgbWVzc2FnZSBpbnN0ZWFkIHdoZW4gcmFuIHdpdGhvdXQgdGhlIHJ1biBhcmd1bWVudC5cblxuXG4gICAgQW55IGFkZGl0aW9uYWwgb3B0aW9uIGlzIHBhc3NlZCB0aGUgdGFyZ2V0LCBvdmVycmlkaW5nIGV4aXN0aW5nIG9wdGlvbnMuXG4gIGApO1xuXG4gIHByb2Nlc3MuZXhpdChleGl0Q29kZSk7XG4gIHRocm93IDA7ICAvLyBUaGUgbm9kZSB0eXBpbmcgc29tZXRpbWVzIGRvbid0IGhhdmUgYSBuZXZlciB0eXBlIGZvciBwcm9jZXNzLmV4aXQoKS5cbn1cblxuLyoqIFBhcnNlIHRoZSBjb21tYW5kIGxpbmUuICovXG5jb25zdCBhcmd2ID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpLCB7IGJvb2xlYW46IFsnaGVscCddIH0pO1xuXG4vKiogQ3JlYXRlIHRoZSBEZXZLaXQgTG9nZ2VyIHVzZWQgdGhyb3VnaCB0aGUgQ0xJLiAqL1xuY29uc3QgbG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihhcmd2Wyd2ZXJib3NlJ10pO1xuXG4vLyBDaGVjayB0aGUgdGFyZ2V0LlxuY29uc3QgdGFyZ2V0U3RyID0gYXJndi5fLnNoaWZ0KCk7XG5pZiAoIXRhcmdldFN0ciAmJiBhcmd2LmhlbHApIHtcbiAgLy8gU2hvdyBhcmNoaXRlY3QgdXNhZ2UgaWYgdGhlcmUncyBubyB0YXJnZXQuXG4gIHVzYWdlKCk7XG59XG5cbi8vIFNwbGl0IGEgdGFyZ2V0IGludG8gaXRzIHBhcnRzLlxubGV0IHByb2plY3Q6IHN0cmluZywgdGFyZ2V0TmFtZTogc3RyaW5nLCBjb25maWd1cmF0aW9uOiBzdHJpbmc7XG5pZiAodGFyZ2V0U3RyKSB7XG4gIFtwcm9qZWN0LCB0YXJnZXROYW1lLCBjb25maWd1cmF0aW9uXSA9IHRhcmdldFN0ci5zcGxpdCgnOicpO1xufVxuXG4vLyBMb2FkIHdvcmtzcGFjZSBjb25maWd1cmF0aW9uIGZpbGUuXG5jb25zdCBjdXJyZW50UGF0aCA9IHByb2Nlc3MuY3dkKCk7XG5jb25zdCBjb25maWdGaWxlTmFtZXMgPSBbXG4gICdhbmd1bGFyLmpzb24nLFxuICAnLmFuZ3VsYXIuanNvbicsXG4gICd3b3Jrc3BhY2UuanNvbicsXG4gICcud29ya3NwYWNlLmpzb24nLFxuXTtcblxuY29uc3QgY29uZmlnRmlsZVBhdGggPSBmaW5kVXAoY29uZmlnRmlsZU5hbWVzLCBjdXJyZW50UGF0aCk7XG5cbmlmICghY29uZmlnRmlsZVBhdGgpIHtcbiAgbG9nZ2VyLmZhdGFsKGBXb3Jrc3BhY2UgY29uZmlndXJhdGlvbiBmaWxlICgke2NvbmZpZ0ZpbGVOYW1lcy5qb2luKCcsICcpfSkgY2Fubm90IGJlIGZvdW5kIGluIGBcbiAgICArIGAnJHtjdXJyZW50UGF0aH0nIG9yIGluIHBhcmVudCBkaXJlY3Rvcmllcy5gKTtcbiAgcHJvY2Vzcy5leGl0KDMpO1xuICB0aHJvdyAzOyAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IGtub3cgdGhhdCBwcm9jZXNzLmV4aXQoKSBuZXZlciByZXR1cm5zLlxufVxuXG5jb25zdCByb290ID0gZGlybmFtZShub3JtYWxpemUoY29uZmlnRmlsZVBhdGgpKTtcbmNvbnN0IGNvbmZpZ0NvbnRlbnQgPSByZWFkRmlsZVN5bmMoY29uZmlnRmlsZVBhdGgsICd1dGYtOCcpO1xuY29uc3Qgd29ya3NwYWNlSnNvbiA9IEpTT04ucGFyc2UoY29uZmlnQ29udGVudCk7XG5cbmNvbnN0IGhvc3QgPSBuZXcgTm9kZUpzU3luY0hvc3QoKTtcbmNvbnN0IHdvcmtzcGFjZSA9IG5ldyBleHBlcmltZW50YWwud29ya3NwYWNlLldvcmtzcGFjZShyb290LCBob3N0KTtcblxubGV0IGxhc3RCdWlsZEV2ZW50ID0geyBzdWNjZXNzOiB0cnVlIH07XG5cbndvcmtzcGFjZS5sb2FkV29ya3NwYWNlRnJvbUpzb24od29ya3NwYWNlSnNvbikucGlwZShcbiAgY29uY2F0TWFwKHdzID0+IG5ldyBBcmNoaXRlY3Qod3MpLmxvYWRBcmNoaXRlY3QoKSksXG4gIGNvbmNhdE1hcChhcmNoaXRlY3QgPT4ge1xuXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0geyAuLi5hcmd2IH07XG4gICAgZGVsZXRlIG92ZXJyaWRlc1snaGVscCddO1xuICAgIGRlbGV0ZSBvdmVycmlkZXNbJ18nXTtcblxuICAgIGNvbnN0IHRhcmdldFNwZWMgPSB7XG4gICAgICBwcm9qZWN0LFxuICAgICAgdGFyZ2V0OiB0YXJnZXROYW1lLFxuICAgICAgY29uZmlndXJhdGlvbixcbiAgICAgIG92ZXJyaWRlcyxcbiAgICB9O1xuXG4gICAgLy8gVE9ETzogYmV0dGVyIGxvZ2dpbmcgb2Ygd2hhdCdzIGhhcHBlbmluZy5cbiAgICBpZiAoYXJndi5oZWxwKSB7XG4gICAgICAvLyBUT0RPOiBhZGQgdGFyZ2V0IGhlbHBcbiAgICAgIHJldHVybiBfdGhyb3coJ1RhcmdldCBoZWxwIE5ZSS4nKTtcbiAgICAgIC8vIGFyY2hpdGVjdC5oZWxwKHRhcmdldE9wdGlvbnMsIGxvZ2dlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1aWxkZXJDb25maWcgPSBhcmNoaXRlY3QuZ2V0QnVpbGRlckNvbmZpZ3VyYXRpb24odGFyZ2V0U3BlYyk7XG5cbiAgICAgIHJldHVybiBhcmNoaXRlY3QucnVuKGJ1aWxkZXJDb25maWcsIHsgbG9nZ2VyIH0pO1xuICAgIH1cbiAgfSksXG4pLnN1YnNjcmliZSh7XG4gIG5leHQ6IChidWlsZEV2ZW50ID0+IGxhc3RCdWlsZEV2ZW50ID0gYnVpbGRFdmVudCksXG4gIGNvbXBsZXRlOiAoKSA9PiBwcm9jZXNzLmV4aXQobGFzdEJ1aWxkRXZlbnQuc3VjY2VzcyA/IDAgOiAxKSxcbiAgZXJyb3I6IChlcnI6IEVycm9yKSA9PiB7XG4gICAgbG9nZ2VyLmZhdGFsKGVyci5tZXNzYWdlKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICBsb2dnZXIuZmF0YWwoZXJyLnN0YWNrKTtcbiAgICB9XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9LFxufSk7XG4iXX0=