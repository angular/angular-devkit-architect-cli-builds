"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const ProgressBar = require("progress");
const readline = require("readline");
class MultiProgressBar {
    constructor(_status, _stream = process.stderr) {
        this._status = _status;
        this._stream = _stream;
        this._bars = new Map();
    }
    _add(id, data) {
        const width = Math.min(80, core_1.terminal.getCapabilities(this._stream).columns || 80);
        const value = {
            data,
            bar: new ProgressBar(this._status, {
                clear: true,
                total: 1,
                width: width,
                complete: '#',
                incomplete: '.',
                stream: this._stream,
            }),
        };
        this._bars.set(id, value);
        readline.moveCursor(this._stream, 0, 1);
        return value;
    }
    complete(id) {
        const maybeBar = this._bars.get(id);
        if (maybeBar) {
            maybeBar.bar.complete = true;
        }
    }
    add(id, data) {
        this._add(id, data);
    }
    get(key) {
        const maybeValue = this._bars.get(key);
        return maybeValue && maybeValue.data;
    }
    has(key) {
        return this._bars.has(key);
    }
    update(key, data, current, total) {
        let maybeBar = this._bars.get(key);
        if (!maybeBar) {
            maybeBar = this._add(key, data);
        }
        maybeBar.data = data;
        if (total !== undefined) {
            maybeBar.bar.total = total;
        }
        if (current !== undefined) {
            maybeBar.bar.curr = Math.max(0, Math.min(current, maybeBar.bar.total));
        }
    }
    render(max = Infinity, sort) {
        const stream = this._stream;
        readline.moveCursor(stream, 0, -this._bars.size);
        readline.cursorTo(stream, 0);
        let values = this._bars.values();
        if (sort) {
            values = [...values].sort((a, b) => sort(a.data, b.data));
        }
        for (const { data, bar } of values) {
            if (max-- == 0) {
                return;
            }
            bar.render(data);
            readline.moveCursor(stream, 0, 1);
            readline.cursorTo(stream, 0);
        }
    }
    terminate() {
        for (const { bar } of this._bars.values()) {
            bar.terminate();
        }
        this._bars.clear();
    }
}
exports.MultiProgressBar = MultiProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2FyY2hpdGVjdF9jbGkvc3JjL3Byb2dyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsK0NBQWdEO0FBQ2hELHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFFckMsTUFBYSxnQkFBZ0I7SUFHM0IsWUFBb0IsT0FBZSxFQUFVLFVBQVUsT0FBTyxDQUFDLE1BQU07UUFBakQsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBRjdELFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBc0MsQ0FBQztJQUVVLENBQUM7SUFDakUsSUFBSSxDQUFDLEVBQU8sRUFBRSxJQUFPO1FBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGVBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRixNQUFNLEtBQUssR0FBRztZQUNaLElBQUk7WUFDSixHQUFHLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDakMsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3JCLENBQUM7U0FDSCxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzFCLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEMsT0FBTyxLQUFLLENBQUM7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QUFFO1lBQ3pDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBdEZELDRDQXNGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IHRlcm1pbmFsIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0ICogYXMgUHJvZ3Jlc3NCYXIgZnJvbSAncHJvZ3Jlc3MnO1xuaW1wb3J0ICogYXMgcmVhZGxpbmUgZnJvbSAncmVhZGxpbmUnO1xuXG5leHBvcnQgY2xhc3MgTXVsdGlQcm9ncmVzc0JhcjxLZXksIFQ+IHtcbiAgcHJpdmF0ZSBfYmFycyA9IG5ldyBNYXA8S2V5LCB7IGRhdGE6IFQsIGJhcjogUHJvZ3Jlc3NCYXIgfT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zdGF0dXM6IHN0cmluZywgcHJpdmF0ZSBfc3RyZWFtID0gcHJvY2Vzcy5zdGRlcnIpIHt9XG4gIHByaXZhdGUgX2FkZChpZDogS2V5LCBkYXRhOiBUKTogeyBkYXRhOiBULCBiYXI6IFByb2dyZXNzQmFyIH0ge1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5taW4oODAsIHRlcm1pbmFsLmdldENhcGFiaWxpdGllcyh0aGlzLl9zdHJlYW0pLmNvbHVtbnMgfHwgODApO1xuICAgIGNvbnN0IHZhbHVlID0ge1xuICAgICAgZGF0YSxcbiAgICAgIGJhcjogbmV3IFByb2dyZXNzQmFyKHRoaXMuX3N0YXR1cywge1xuICAgICAgICBjbGVhcjogdHJ1ZSxcbiAgICAgICAgdG90YWw6IDEsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgY29tcGxldGU6ICcjJyxcbiAgICAgICAgaW5jb21wbGV0ZTogJy4nLFxuICAgICAgICBzdHJlYW06IHRoaXMuX3N0cmVhbSxcbiAgICAgIH0pLFxuICAgIH07XG4gICAgdGhpcy5fYmFycy5zZXQoaWQsIHZhbHVlKTtcbiAgICByZWFkbGluZS5tb3ZlQ3Vyc29yKHRoaXMuX3N0cmVhbSwgMCwgMSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBjb21wbGV0ZShpZDogS2V5KSB7XG4gICAgY29uc3QgbWF5YmVCYXIgPSB0aGlzLl9iYXJzLmdldChpZCk7XG4gICAgaWYgKG1heWJlQmFyKSB7XG4gICAgICBtYXliZUJhci5iYXIuY29tcGxldGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGFkZChpZDogS2V5LCBkYXRhOiBUKSB7XG4gICAgdGhpcy5fYWRkKGlkLCBkYXRhKTtcbiAgfVxuXG4gIGdldChrZXk6IEtleSk6IFQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IG1heWJlVmFsdWUgPSB0aGlzLl9iYXJzLmdldChrZXkpO1xuXG4gICAgcmV0dXJuIG1heWJlVmFsdWUgJiYgbWF5YmVWYWx1ZS5kYXRhO1xuICB9XG4gIGhhcyhrZXk6IEtleSkge1xuICAgIHJldHVybiB0aGlzLl9iYXJzLmhhcyhrZXkpO1xuICB9XG4gIHVwZGF0ZShrZXk6IEtleSwgZGF0YTogVCwgY3VycmVudD86IG51bWJlciwgdG90YWw/OiBudW1iZXIpIHtcbiAgICBsZXQgbWF5YmVCYXIgPSB0aGlzLl9iYXJzLmdldChrZXkpO1xuXG4gICAgaWYgKCFtYXliZUJhcikge1xuICAgICAgbWF5YmVCYXIgPSB0aGlzLl9hZGQoa2V5LCBkYXRhKTtcbiAgICB9XG5cbiAgICBtYXliZUJhci5kYXRhID0gZGF0YTtcbiAgICBpZiAodG90YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbWF5YmVCYXIuYmFyLnRvdGFsID0gdG90YWw7XG4gICAgfVxuICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1heWJlQmFyLmJhci5jdXJyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oY3VycmVudCwgbWF5YmVCYXIuYmFyLnRvdGFsKSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKG1heCA9IEluZmluaXR5LCBzb3J0PzogKGE6IFQsIGI6IFQpID0+IG51bWJlcikge1xuICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuX3N0cmVhbTtcblxuICAgIHJlYWRsaW5lLm1vdmVDdXJzb3Ioc3RyZWFtLCAwLCAtdGhpcy5fYmFycy5zaXplKTtcbiAgICByZWFkbGluZS5jdXJzb3JUbyhzdHJlYW0sIDApO1xuXG4gICAgbGV0IHZhbHVlczogSXRlcmFibGU8eyBkYXRhOiBULCBiYXI6IFByb2dyZXNzQmFyIH0+ID0gdGhpcy5fYmFycy52YWx1ZXMoKTtcbiAgICBpZiAoc29ydCkge1xuICAgICAgdmFsdWVzID0gWy4uLnZhbHVlc10uc29ydCgoYSwgYikgPT4gc29ydChhLmRhdGEsIGIuZGF0YSkpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgeyBkYXRhLCBiYXIgfSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmIChtYXgtLSA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYmFyLnJlbmRlcihkYXRhKTtcbiAgICAgIHJlYWRsaW5lLm1vdmVDdXJzb3Ioc3RyZWFtLCAwLCAxKTtcbiAgICAgIHJlYWRsaW5lLmN1cnNvclRvKHN0cmVhbSwgMCk7XG4gICAgfVxuICB9XG5cbiAgdGVybWluYXRlKCkge1xuICAgIGZvciAoY29uc3QgeyBiYXIgfSBvZiB0aGlzLl9iYXJzLnZhbHVlcygpKSB7XG4gICAgICBiYXIudGVybWluYXRlKCk7XG4gICAgfVxuICAgIHRoaXMuX2JhcnMuY2xlYXIoKTtcbiAgfVxufVxuIl19