#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("symbol-observable");
// symbol polyfill must go first
// tslint:disable-next-line:ordered-imports import-groups
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const fs_1 = require("fs");
const minimist = require("minimist");
const path = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function findUp(names, from) {
    if (!Array.isArray(names)) {
        names = [names];
    }
    const root = path.parse(from).root;
    let currentDir = from;
    while (currentDir && currentDir !== root) {
        for (const name of names) {
            const p = path.join(currentDir, name);
            if (fs_1.existsSync(p)) {
                return p;
            }
        }
        currentDir = path.dirname(currentDir);
    }
    return null;
}
/**
 * Show usage of the CLI tool, and exit the process.
 */
function usage(exitCode = 0) {
    logger.info(core_1.tags.stripIndent `
    architect [project][:target][:configuration] [options, ...]

    Run a project target.
    If project/target/configuration are not specified, the workspace defaults will be used.

    Options:
        --help              Show available options for project target.
                            Shows this message instead when ran without the run argument.


    Any additional option is passed the target, overriding existing options.
  `);
    process.exit(exitCode);
    throw 0; // The node typing sometimes don't have a never type for process.exit().
}
/** Parse the command line. */
const argv = minimist(process.argv.slice(2), { boolean: ['help'] });
/** Create the DevKit Logger used through the CLI. */
const logger = node_1.createConsoleLogger(argv['verbose']);
// Check the target.
const targetStr = argv._.shift();
if (!targetStr && argv.help) {
    // Show architect usage if there's no target.
    usage();
}
// Split a target into its parts.
let project, targetName, configuration;
if (targetStr) {
    [project, targetName, configuration] = targetStr.split(':');
}
// Load workspace configuration file.
const currentPath = process.cwd();
const configFileNames = [
    'angular.json',
    '.angular.json',
    'workspace.json',
    '.workspace.json',
];
const configFilePath = findUp(configFileNames, currentPath);
if (!configFilePath) {
    logger.fatal(`Workspace configuration file (${configFileNames.join(', ')}) cannot be found in `
        + `'${currentPath}' or in parent directories.`);
    process.exit(3);
    throw 3; // TypeScript doesn't know that process.exit() never returns.
}
const root = core_1.dirname(core_1.normalize(configFilePath));
const configContent = fs_1.readFileSync(configFilePath, 'utf-8');
const workspaceJson = JSON.parse(configContent);
const host = new node_1.NodeJsSyncHost();
const workspace = new core_1.experimental.workspace.Workspace(root, host);
let lastBuildEvent = { success: true };
workspace.loadWorkspaceFromJson(workspaceJson).pipe(operators_1.concatMap(ws => new architect_1.Architect(ws).loadArchitect()), operators_1.concatMap(architect => {
    const overrides = Object.assign({}, argv);
    delete overrides['help'];
    delete overrides['_'];
    const targetSpec = {
        project,
        target: targetName,
        configuration,
        overrides,
    };
    // TODO: better logging of what's happening.
    if (argv.help) {
        // TODO: add target help
        return rxjs_1.throwError('Target help NYI.');
        // architect.help(targetOptions, logger);
    }
    else {
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        return architect.run(builderConfig, { logger });
    }
})).subscribe({
    next: (buildEvent => lastBuildEvent = buildEvent),
    complete: () => process.exit(lastBuildEvent.success ? 0 : 1),
    error: (err) => {
        logger.fatal(err.message);
        if (err.stack) {
            logger.fatal(err.stack);
        }
        process.exit(1);
    },
});
//# sourceMappingURL=data:application/json;base64,