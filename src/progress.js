"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const ProgressBar = require("progress");
const readline = require("readline");
class MultiProgressBar {
    constructor(_status, _stream = process.stderr) {
        this._status = _status;
        this._stream = _stream;
        this._bars = new Map();
    }
    _add(id, data) {
        const width = Math.min(80, core_1.terminal.getCapabilities(this._stream).columns || 80);
        const value = {
            data,
            bar: new ProgressBar(this._status, {
                renderThrottle: 0,
                clear: true,
                total: 1,
                width: width,
                complete: '#',
                incomplete: '.',
                stream: this._stream,
            }),
        };
        this._bars.set(id, value);
        readline.moveCursor(this._stream, 0, 1);
        return value;
    }
    complete(id) {
        const maybeBar = this._bars.get(id);
        if (maybeBar) {
            maybeBar.bar.complete = true;
        }
    }
    add(id, data) {
        this._add(id, data);
    }
    get(key) {
        const maybeValue = this._bars.get(key);
        return maybeValue && maybeValue.data;
    }
    has(key) {
        return this._bars.has(key);
    }
    update(key, data, current, total) {
        let maybeBar = this._bars.get(key);
        if (!maybeBar) {
            maybeBar = this._add(key, data);
        }
        maybeBar.data = data;
        if (total !== undefined) {
            maybeBar.bar.total = total;
        }
        if (current !== undefined) {
            maybeBar.bar.curr = Math.max(0, Math.min(current, maybeBar.bar.total));
        }
    }
    render(max = Infinity, sort) {
        const stream = this._stream;
        readline.moveCursor(stream, 0, -this._bars.size);
        readline.cursorTo(stream, 0);
        let values = this._bars.values();
        if (sort) {
            values = [...values].sort((a, b) => sort(a.data, b.data));
        }
        for (const { data, bar } of values) {
            if (max-- == 0) {
                return;
            }
            bar.render(data);
            readline.moveCursor(stream, 0, 1);
            readline.cursorTo(stream, 0);
        }
    }
    terminate() {
        for (const { bar } of this._bars.values()) {
            bar.terminate();
        }
        this._bars.clear();
    }
}
exports.MultiProgressBar = MultiProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2FyY2hpdGVjdF9jbGkvc3JjL3Byb2dyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsK0NBQWdEO0FBQ2hELHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFFckMsTUFBYSxnQkFBZ0I7SUFHM0IsWUFBb0IsT0FBZSxFQUFVLFVBQVUsT0FBTyxDQUFDLE1BQU07UUFBakQsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBRjdELFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBc0MsQ0FBQztJQUVVLENBQUM7SUFDakUsSUFBSSxDQUFDLEVBQU8sRUFBRSxJQUFPO1FBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGVBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRixNQUFNLEtBQUssR0FBRztZQUNaLElBQUk7WUFDSixHQUFHLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDakMsY0FBYyxFQUFFLENBQUM7Z0JBQ2pCLEtBQUssRUFBRSxJQUFJO2dCQUNYLEtBQUssRUFBRSxDQUFDO2dCQUNSLEtBQUssRUFBRSxLQUFLO2dCQUNaLFFBQVEsRUFBRSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTzthQUNyQixDQUFDO1NBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxQixRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFD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LEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQXZGRCw0Q0F1RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyB0ZXJtaW5hbCB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCAqIGFzIFByb2dyZXNzQmFyIGZyb20gJ3Byb2dyZXNzJztcbmltcG9ydCAqIGFzIHJlYWRsaW5lIGZyb20gJ3JlYWRsaW5lJztcblxuZXhwb3J0IGNsYXNzIE11bHRpUHJvZ3Jlc3NCYXI8S2V5LCBUPiB7XG4gIHByaXZhdGUgX2JhcnMgPSBuZXcgTWFwPEtleSwgeyBkYXRhOiBULCBiYXI6IFByb2dyZXNzQmFyIH0+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc3RhdHVzOiBzdHJpbmcsIHByaXZhdGUgX3N0cmVhbSA9IHByb2Nlc3Muc3RkZXJyKSB7fVxuICBwcml2YXRlIF9hZGQoaWQ6IEtleSwgZGF0YTogVCk6IHsgZGF0YTogVCwgYmFyOiBQcm9ncmVzc0JhciB9IHtcbiAgICBjb25zdCB3aWR0aCA9IE1hdGgubWluKDgwLCB0ZXJtaW5hbC5nZXRDYXBhYmlsaXRpZXModGhpcy5fc3RyZWFtKS5jb2x1bW5zIHx8IDgwKTtcbiAgICBjb25zdCB2YWx1ZSA9IHtcbiAgICAgIGRhdGEsXG4gICAgICBiYXI6IG5ldyBQcm9ncmVzc0Jhcih0aGlzLl9zdGF0dXMsIHtcbiAgICAgICAgcmVuZGVyVGhyb3R0bGU6IDAsXG4gICAgICAgIGNsZWFyOiB0cnVlLFxuICAgICAgICB0b3RhbDogMSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBjb21wbGV0ZTogJyMnLFxuICAgICAgICBpbmNvbXBsZXRlOiAnLicsXG4gICAgICAgIHN0cmVhbTogdGhpcy5fc3RyZWFtLFxuICAgICAgfSksXG4gICAgfTtcbiAgICB0aGlzLl9iYXJzLnNldChpZCwgdmFsdWUpO1xuICAgIHJlYWRsaW5lLm1vdmVDdXJzb3IodGhpcy5fc3RyZWFtLCAwLCAxKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbXBsZXRlKGlkOiBLZXkpIHtcbiAgICBjb25zdCBtYXliZUJhciA9IHRoaXMuX2JhcnMuZ2V0KGlkKTtcbiAgICBpZiAobWF5YmVCYXIpIHtcbiAgICAgIG1heWJlQmFyLmJhci5jb21wbGV0ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgYWRkKGlkOiBLZXksIGRhdGE6IFQpIHtcbiAgICB0aGlzLl9hZGQoaWQsIGRhdGEpO1xuICB9XG5cbiAgZ2V0KGtleTogS2V5KTogVCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbWF5YmVWYWx1ZSA9IHRoaXMuX2JhcnMuZ2V0KGtleSk7XG5cbiAgICByZXR1cm4gbWF5YmVWYWx1ZSAmJiBtYXliZVZhbHVlLmRhdGE7XG4gIH1cbiAgaGFzKGtleTogS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2JhcnMuaGFzKGtleSk7XG4gIH1cbiAgdXBkYXRlKGtleTogS2V5LCBkYXRhOiBULCBjdXJyZW50PzogbnVtYmVyLCB0b3RhbD86IG51bWJlcikge1xuICAgIGxldCBtYXliZUJhciA9IHRoaXMuX2JhcnMuZ2V0KGtleSk7XG5cbiAgICBpZiAoIW1heWJlQmFyKSB7XG4gICAgICBtYXliZUJhciA9IHRoaXMuX2FkZChrZXksIGRhdGEpO1xuICAgIH1cblxuICAgIG1heWJlQmFyLmRhdGEgPSBkYXRhO1xuICAgIGlmICh0b3RhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXliZUJhci5iYXIudG90YWwgPSB0b3RhbDtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbWF5YmVCYXIuYmFyLmN1cnIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjdXJyZW50LCBtYXliZUJhci5iYXIudG90YWwpKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIobWF4ID0gSW5maW5pdHksIHNvcnQ/OiAoYTogVCwgYjogVCkgPT4gbnVtYmVyKSB7XG4gICAgY29uc3Qgc3RyZWFtID0gdGhpcy5fc3RyZWFtO1xuXG4gICAgcmVhZGxpbmUubW92ZUN1cnNvcihzdHJlYW0sIDAsIC10aGlzLl9iYXJzLnNpemUpO1xuICAgIHJlYWRsaW5lLmN1cnNvclRvKHN0cmVhbSwgMCk7XG5cbiAgICBsZXQgdmFsdWVzOiBJdGVyYWJsZTx7IGRhdGE6IFQsIGJhcjogUHJvZ3Jlc3NCYXIgfT4gPSB0aGlzLl9iYXJzLnZhbHVlcygpO1xuICAgIGlmIChzb3J0KSB7XG4gICAgICB2YWx1ZXMgPSBbLi4udmFsdWVzXS5zb3J0KChhLCBiKSA9PiBzb3J0KGEuZGF0YSwgYi5kYXRhKSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCB7IGRhdGEsIGJhciB9IG9mIHZhbHVlcykge1xuICAgICAgaWYgKG1heC0tID09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBiYXIucmVuZGVyKGRhdGEpO1xuICAgICAgcmVhZGxpbmUubW92ZUN1cnNvcihzdHJlYW0sIDAsIDEpO1xuICAgICAgcmVhZGxpbmUuY3Vyc29yVG8oc3RyZWFtLCAwKTtcbiAgICB9XG4gIH1cblxuICB0ZXJtaW5hdGUoKSB7XG4gICAgZm9yIChjb25zdCB7IGJhciB9IG9mIHRoaXMuX2JhcnMudmFsdWVzKCkpIHtcbiAgICAgIGJhci50ZXJtaW5hdGUoKTtcbiAgICB9XG4gICAgdGhpcy5fYmFycy5jbGVhcigpO1xuICB9XG59XG4iXX0=