#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const fs_1 = require("fs");
const minimist = require("minimist");
const path = require("path");
const throw_1 = require("rxjs/observable/throw");
const operators_1 = require("rxjs/operators");
function findUp(names, from) {
    if (!Array.isArray(names)) {
        names = [names];
    }
    const root = path.parse(from).root;
    let currentDir = from;
    while (currentDir && currentDir !== root) {
        for (const name of names) {
            const p = path.join(currentDir, name);
            if (fs_1.existsSync(p)) {
                return p;
            }
        }
        currentDir = path.dirname(currentDir);
    }
    return null;
}
/**
 * Show usage of the CLI tool, and exit the process.
 */
function usage(exitCode = 0) {
    logger.info(core_1.tags.stripIndent `
    architect [project][:target][:configuration] [options, ...]

    Run a project target.
    If project/target/configuration are not specified, the workspace defaults will be used.

    Options:
        --help              Show available options for project target.
                            Shows this message instead when ran without the run argument.


    Any additional option is passed the target, overriding existing options.
  `);
    process.exit(exitCode);
    throw 0; // The node typing sometimes don't have a never type for process.exit().
}
/** Parse the command line. */
const argv = minimist(process.argv.slice(2), { boolean: ['help'] });
/** Create the DevKit Logger used through the CLI. */
const logger = node_1.createConsoleLogger(argv['verbose']);
// Check the target.
const targetStr = argv._.shift();
if (!targetStr && argv.help) {
    // Show architect usage if there's no target.
    usage();
}
// Split a target into its parts.
let project, targetName, configuration;
if (targetStr) {
    [project, targetName, configuration] = targetStr.split(':');
}
// Load workspace configuration file.
const currentPath = process.cwd();
const configFileName = '.architect.json';
const configFilePath = findUp([configFileName], currentPath);
if (!configFilePath) {
    logger.fatal(`Workspace configuration file (${configFileName}) cannot be found in `
        + `'${currentPath}' or in parent directories.`);
    process.exit(3);
    throw 3; // TypeScript doesn't know that process.exit() never returns.
}
const workspacePath = core_1.dirname(core_1.normalize(configFilePath));
const configContent = fs_1.readFileSync(configFilePath, 'utf-8');
const configJson = JSON.parse(configContent);
const host = new node_1.NodeJsSyncHost();
const architect = new architect_1.Architect(workspacePath, host);
architect.loadWorkspaceFromJson(configJson).pipe(operators_1.concatMap(() => {
    const overrides = Object.assign({}, argv);
    delete overrides['help'];
    delete overrides['_'];
    const targetOptions = {
        project,
        target: targetName,
        configuration,
        overrides,
    };
    const target = architect.getTarget(targetOptions);
    // TODO: better logging of what's happening.
    if (argv.help) {
        // TODO: add target help
        return throw_1._throw('Target help NYI.');
        // architect.help(targetOptions, logger);
    }
    else {
        return architect.run(target, { logger });
    }
})).subscribe({
    next: (event => logger.info(JSON.stringify(event, null, 2))),
    complete: () => process.exit(0),
    error: (err) => {
        logger.fatal(err.message);
        if (err.stack) {
            logger.fatal(err.stack);
        }
        process.exit(1);
    },
});
//# sourceMappingURL=data:application/json;base64,